# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    # - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Install Depends
      run: |
        sudo apt-get update
        sudo apt install build-essential git cmake tclsh pkg-config nasm
        echo -e "Start to install libs..."
        sudo apt install nlohmann-json3-dev
        sudo apt install libcurl4-gnutls-dev
        sudo apt install libsqlite3-dev
        sudo apt install libmosquitto-dev
    - name: Build
      shell: bash
      # Build your program with the given configuration
      run: |
        echo "1. thu muc hien tai la:"
        pwd
        ls
        echo "2. tai khoan dang chay la:"
        sudo su
        whoami
        cd ~
        mkdir -p lib src
        echo "3. thu muc hien tai la:"
        cd src
        pwd
        ls
        git clone https://github.com/mirror/x264.git
        cd x264
        mkdir -p ~/lib/x264
        ./configure --prefix=~/lib/x264 --enable-static --enable-pic
        echo "4. bat dau make x264:"
        make -j4
        echo "5. bat dau make install x264"
        make install
        echo "6. thu muc lib la:"
        cd ~/lib
        ls -lht
        echo "7. ve thu muc root de clone ffmpeg"
        cd ~/src
        ls -lht
        git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg
        cd ffmpeg
        ls
        cd ~/lib/x264/lib
        echo "8. cac thu muc trong ~/lib/x264/lib:"
        ls
        cd ~/lib/x264/lib/pkgconfig
        echo "9. cac thu muc trong ~/lib/x264/lib/pkgconfig:"
        ls
        echo "10. bat dau setup moi truong"
        cd ~/lib/x264/
        echo "11. cac thu muc trong ~/lib/x264:"
        ls

        cd /home/runner/lib
        echo "12. cac thu muc trong /home/runner/lib:"
        ls
        cd ~/lib
        echo "13. cac thu muc trong ~/lib:"
        ls
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/lib/x264/lib
        export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:~/lib/x264/lib/pkgconfig
        export PKG_CONFIG_LIBDIR=$PKG_CONFIG_LIBDIR:~/lib/x264/lib
        mkdir ~/lib/ffmpeg
        ./configure --prefix=~/lib/ffmpeg --enable-libx264 --enable-gpl
        echo "14. bat dau make ffmpeg"
        make -j4
        echo "15. bat dau make install ffmpeg"
        make install
    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}

